// Package postgres contains the types for schema 'public'.
package postgres

import (
	"database/sql"

	"github.com/PaulRaUnite/uni-db-index-task/shop-server/internal/data"
	"github.com/pkg/errors"
	"gitlab.com/distributed_lab/kit/pgdb"
)

// Code generated by xo. DO NOT EDIT.

// CountryQ represents helper struct to access row of 'public.countries'.
type CountryQ struct {
	db *pgdb.DB
}

// NewCountryQ  - creates new instance
func NewCountryQ(db *pgdb.DB) CountryQ {
	return CountryQ{
		db,
	}
}

// CountryQ  - creates new instance of CountryQ
func (s Storage) CountryQ() data.CountryQ {
	return NewCountryQ(s.DB())
}

// Insert inserts the Country to the database.
func (q CountryQ) Insert(c *data.Country) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.countries (` +
		`readable_name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`

	// run query
	err = q.db.GetRaw(&c.ID, sqlstr, c.ReadableName)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Country in the database.
func (q CountryQ) Update(c *data.Country) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.countries SET (` +
		`readable_name` +
		`) = ROW( ` +
		`$1` +
		`) WHERE id = $2`
	// run query
	err = q.db.ExecRaw(sqlstr, c.ReadableName, c.ID)
	return err
}

// Upsert performs an upsert for Country.
func (q CountryQ) Upsert(c *data.Country) error {
	var err error
	// sql query
	const sqlstr = `INSERT INTO public.countries (` +
		`id, readable_name` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, readable_name` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.readable_name` +
		`)`
	// run query
	err = q.db.ExecRaw(sqlstr, c.ID, c.ReadableName)
	if err != nil {
		return err
	}
	return nil
}

// Delete deletes the Country from the database.
func (q CountryQ) Delete(id int) error {
	var err error
	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.countries  WHERE id = $1`

	// run query
	err = q.db.ExecRaw(sqlstr, id)
	if err != nil {
		return err
	}

	return nil
}

// CountryByID retrieves a row from 'public.countries' as a Country.
//
// Generated from index 'countries_pkey'.
func (q CountryQ) CountryByID(id int) (*data.Country, error) {
	var err error
	// sql query
	const sqlstr = `SELECT ` +
		`id, readable_name ` +
		`FROM public.countries ` +
		`WHERE id = $1`

	// run query
	c := data.Country{}

	err = q.db.GetRaw(&c, sqlstr, id)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	return &c, nil
}

// UpsertCountryByReadableName - tries to insert c into db on conflict updates non primary key fields
// and sets generated field into c
func (q CountryQ) UpsertCountryByReadableName(c *data.Country) error {
	var err error
	// sql query
	const sqlstr = `INSERT INTO public.countries (` +
		`readable_name` +
		`) VALUES (` +
		`$1` +
		`) ON CONFLICT (readable_name) DO UPDATE SET ` +
		`readable_name = EXCLUDED.readable_name` +
		` RETURNING id`
	// run query
	err = q.db.GetRaw(&c.ID, sqlstr, c.ReadableName)
	if err != nil {
		return err
	}
	return nil
}

// CountryByReadableName retrieves a row from 'public.countries' as a Country.
//
// Generated from index 'countries_readable_name_key'.
func (q CountryQ) CountryByReadableName(readableName string) (*data.Country, error) {
	var err error
	// sql query
	const sqlstr = `SELECT ` +
		`id, readable_name ` +
		`FROM public.countries ` +
		`WHERE readable_name = $1`

	// run query
	c := data.Country{}

	err = q.db.GetRaw(&c, sqlstr, readableName)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	return &c, nil
}
