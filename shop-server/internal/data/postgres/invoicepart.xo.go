// Package postgres contains the types for schema 'public'.
package postgres

import (
	"database/sql"

	"github.com/PaulRaUnite/uni-db-index-task/shop-server/internal/data"
	"github.com/pkg/errors"
	"gitlab.com/distributed_lab/kit/pgdb"
)

// Code generated by xo. DO NOT EDIT.

// InvoicePartQ represents helper struct to access row of 'public.invoice_parts'.
type InvoicePartQ struct {
	db *pgdb.DB
}

// NewInvoicePartQ  - creates new instance
func NewInvoicePartQ(db *pgdb.DB) InvoicePartQ {
	return InvoicePartQ{
		db,
	}
}

// InvoicePartQ  - creates new instance of InvoicePartQ
func (s Storage) InvoicePartQ() data.InvoicePartQ {
	return NewInvoicePartQ(s.DB())
}

// Insert inserts the InvoicePart to the database.
func (q InvoicePartQ) Insert(ip *data.InvoicePart) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.invoice_parts (` +
		`good_id, unit_price, quantity, invoice_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	err = q.db.GetRaw(&ip.ID, sqlstr, ip.GoodID, ip.UnitPrice, ip.Quantity, ip.InvoiceID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the InvoicePart in the database.
func (q InvoicePartQ) Update(ip *data.InvoicePart) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.invoice_parts SET (` +
		`good_id, unit_price, quantity, invoice_id` +
		`) = ROW( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`
	// run query
	err = q.db.ExecRaw(sqlstr, ip.GoodID, ip.UnitPrice, ip.Quantity, ip.InvoiceID, ip.ID)
	return err
}

// Upsert performs an upsert for InvoicePart.
func (q InvoicePartQ) Upsert(ip *data.InvoicePart) error {
	var err error
	// sql query
	const sqlstr = `INSERT INTO public.invoice_parts (` +
		`id, good_id, unit_price, quantity, invoice_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, good_id, unit_price, quantity, invoice_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.good_id, EXCLUDED.unit_price, EXCLUDED.quantity, EXCLUDED.invoice_id` +
		`)`
	// run query
	err = q.db.ExecRaw(sqlstr, ip.ID, ip.GoodID, ip.UnitPrice, ip.Quantity, ip.InvoiceID)
	if err != nil {
		return err
	}
	return nil
}

// Delete deletes the InvoicePart from the database.
func (q InvoicePartQ) Delete(id int64) error {
	var err error
	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.invoice_parts  WHERE id = $1`

	// run query
	err = q.db.ExecRaw(sqlstr, id)
	if err != nil {
		return err
	}

	return nil
}

// InvoicePartByID retrieves a row from 'public.invoice_parts' as a InvoicePart.
//
// Generated from index 'invoice_parts_pkey'.
func (q InvoicePartQ) InvoicePartByID(id int64) (*data.InvoicePart, error) {
	var err error
	// sql query
	const sqlstr = `SELECT ` +
		`id, good_id, unit_price, quantity, invoice_id ` +
		`FROM public.invoice_parts ` +
		`WHERE id = $1`

	// run query
	ip := data.InvoicePart{}

	err = q.db.GetRaw(&ip, sqlstr, id)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	return &ip, nil
}
