// Package postgres contains the types for schema 'public'.
package postgres

import (
	"database/sql"

	"github.com/PaulRaUnite/uni-db-index-task/shop-server/internal/data"
	"github.com/pkg/errors"
	"gitlab.com/distributed_lab/kit/pgdb"
)

// Code generated by xo. DO NOT EDIT.

// GoodQ represents helper struct to access row of 'public.goods'.
type GoodQ struct {
	db *pgdb.DB
}

// NewGoodQ  - creates new instance
func NewGoodQ(db *pgdb.DB) GoodQ {
	return GoodQ{
		db,
	}
}

// GoodQ  - creates new instance of GoodQ
func (s Storage) GoodQ() data.GoodQ {
	return NewGoodQ(s.DB())
}

// Insert inserts the Good to the database.
func (q GoodQ) Insert(g *data.Good) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.goods (` +
		`code, description, price, amount` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	err = q.db.GetRaw(&g.ID, sqlstr, g.Code, g.Description, g.Price, g.Amount)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Good in the database.
func (q GoodQ) Update(g *data.Good) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.goods SET (` +
		`code, description, price, amount` +
		`) = ROW( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`
	// run query
	err = q.db.ExecRaw(sqlstr, g.Code, g.Description, g.Price, g.Amount, g.ID)
	return err
}

// Upsert performs an upsert for Good.
func (q GoodQ) Upsert(g *data.Good) error {
	var err error
	// sql query
	const sqlstr = `INSERT INTO public.goods (` +
		`id, code, description, price, amount` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, code, description, price, amount` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.code, EXCLUDED.description, EXCLUDED.price, EXCLUDED.amount` +
		`)`
	// run query
	err = q.db.ExecRaw(sqlstr, g.ID, g.Code, g.Description, g.Price, g.Amount)
	if err != nil {
		return err
	}
	return nil
}

// Delete deletes the Good from the database.
func (q GoodQ) Delete(id int) error {
	var err error
	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.goods  WHERE id = $1`

	// run query
	err = q.db.ExecRaw(sqlstr, id)
	if err != nil {
		return err
	}

	return nil
}

// UpsertGoodByCode - tries to insert g into db on conflict updates non primary key fields
// and sets generated field into g
func (q GoodQ) UpsertGoodByCode(g *data.Good) error {
	var err error
	// sql query
	const sqlstr = `INSERT INTO public.goods (` +
		`code, description, price, amount` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (code) DO UPDATE SET ` +
		`(code, description, price, amount` +
		`) = (` +
		`EXCLUDED.code, EXCLUDED.description, EXCLUDED.price, EXCLUDED.amount)` +
		` RETURNING id`
	// run query
	err = q.db.GetRaw(&g.ID, sqlstr, g.Code, g.Description, g.Price, g.Amount)
	if err != nil {
		return err
	}
	return nil
}

// GoodByCode retrieves a row from 'public.goods' as a Good.
//
// Generated from index 'goods_code_key'.
func (q GoodQ) GoodByCode(code string) (*data.Good, error) {
	var err error
	// sql query
	const sqlstr = `SELECT ` +
		`id, code, description, price, amount ` +
		`FROM public.goods ` +
		`WHERE code = $1`

	// run query
	g := data.Good{}

	err = q.db.GetRaw(&g, sqlstr, code)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	return &g, nil
}

// GoodByID retrieves a row from 'public.goods' as a Good.
//
// Generated from index 'goods_pkey'.
func (q GoodQ) GoodByID(id int) (*data.Good, error) {
	var err error
	// sql query
	const sqlstr = `SELECT ` +
		`id, code, description, price, amount ` +
		`FROM public.goods ` +
		`WHERE id = $1`

	// run query
	g := data.Good{}

	err = q.db.GetRaw(&g, sqlstr, id)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	return &g, nil
}
