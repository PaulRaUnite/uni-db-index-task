// Package postgres contains the types for schema 'public'.
package postgres

import (
	"database/sql"

	"github.com/PaulRaUnite/uni-db-index-task/shop-server/internal/data"
	"github.com/pkg/errors"
	"gitlab.com/distributed_lab/kit/pgdb"
)

// Code generated by xo. DO NOT EDIT.

// InvoiceQ represents helper struct to access row of 'public.invoices'.
type InvoiceQ struct {
	db *pgdb.DB
}

// NewInvoiceQ  - creates new instance
func NewInvoiceQ(db *pgdb.DB) InvoiceQ {
	return InvoiceQ{
		db,
	}
}

// InvoiceQ  - creates new instance of InvoiceQ
func (s Storage) InvoiceQ() data.InvoiceQ {
	return NewInvoiceQ(s.DB())
}

// Insert inserts the Invoice to the database.
func (q InvoiceQ) Insert(i *data.Invoice) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.invoices (` +
		`customer_id, destination_country_id, invoice_date, status` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	err = q.db.GetRaw(&i.ID, sqlstr, i.CustomerID, i.DestinationCountryID, i.InvoiceDate, i.Status)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Invoice in the database.
func (q InvoiceQ) Update(i *data.Invoice) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.invoices SET (` +
		`customer_id, destination_country_id, invoice_date, status` +
		`) = ROW( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`
	// run query
	err = q.db.ExecRaw(sqlstr, i.CustomerID, i.DestinationCountryID, i.InvoiceDate, i.Status, i.ID)
	return err
}

// Upsert performs an upsert for Invoice.
func (q InvoiceQ) Upsert(i *data.Invoice) error {
	var err error
	// sql query
	const sqlstr = `INSERT INTO public.invoices (` +
		`id, customer_id, destination_country_id, invoice_date, status` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, customer_id, destination_country_id, invoice_date, status` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.customer_id, EXCLUDED.destination_country_id, EXCLUDED.invoice_date, EXCLUDED.status` +
		`)`
	// run query
	err = q.db.ExecRaw(sqlstr, i.ID, i.CustomerID, i.DestinationCountryID, i.InvoiceDate, i.Status)
	if err != nil {
		return err
	}
	return nil
}

// Delete deletes the Invoice from the database.
func (q InvoiceQ) Delete(id int64) error {
	var err error
	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.invoices  WHERE id = $1`

	// run query
	err = q.db.ExecRaw(sqlstr, id)
	if err != nil {
		return err
	}

	return nil
}

// InvoiceByID retrieves a row from 'public.invoices' as a Invoice.
//
// Generated from index 'invoices_pkey'.
func (q InvoiceQ) InvoiceByID(id int64) (*data.Invoice, error) {
	var err error
	// sql query
	const sqlstr = `SELECT ` +
		`id, customer_id, destination_country_id, invoice_date, status ` +
		`FROM public.invoices ` +
		`WHERE id = $1`

	// run query
	i := data.Invoice{}

	err = q.db.GetRaw(&i, sqlstr, id)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	return &i, nil
}
